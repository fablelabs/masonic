{"version":3,"file":"index.dev.mjs","sources":["../../src/use-scroller.ts","../../src/elements-cache.ts","../../src/use-force-update.ts","../../src/use-masonry.tsx","../../src/masonry-scroller.tsx","../../src/use-container-position.ts","../../src/use-resize-observer.ts","../../src/interval-tree.ts","../../src/use-positioner.ts","../../src/use-scroll-to-index.ts","../../src/masonry.tsx","../../src/list.tsx","../../src/use-infinite-loader.ts"],"sourcesContent":["import * as React from 'react'\nimport useScrollPosition from '@react-hook/window-scroll'\nimport {requestTimeout, clearRequestTimeout} from '@essentials/request-timeout'\n\n/**\n * A hook for tracking whether the `window` is currently being scrolled and it's scroll position on\n * the y-axis. These values are used for determining which grid cells to render and when\n * to add styles to the masonry container that maximize scroll performance.\n *\n * @param offset The vertical space in pixels between the top of the grid container and the top\n *  of the browser `document.documentElement`.\n * @param fps This determines how often (in frames per second) to update the scroll position of the\n *  browser `window` in state, and as a result the rate the masonry grid recalculates its visible cells.\n *  The default value of `12` has been very reasonable in my own testing, but if you have particularly\n *  heavy `render` components it may be prudent to reduce this number.\n */\nexport function useScroller(\n  offset = 0,\n  fps = 12\n): {scrollTop: number; isScrolling: boolean} {\n  const scrollTop = useScrollPosition(fps)\n  const [isScrolling, setIsScrolling] = React.useState(false)\n  const didMount = React.useRef(0)\n\n  React.useEffect(() => {\n    if (didMount.current === 1) setIsScrolling(true)\n    const to = requestTimeout(() => {\n      // This is here to prevent premature bail outs while maintaining high resolution\n      // unsets. Without it there will always bee a lot of unnecessary DOM writes to style.\n      setIsScrolling(false)\n    }, 40 + 1000 / fps)\n    didMount.current = 1\n    return () => clearRequestTimeout(to)\n  }, [fps, scrollTop])\n\n  return {scrollTop: Math.max(0, scrollTop - offset), isScrolling}\n}\n","export const elementsCache: WeakMap<Element, number> = new WeakMap()\n","import * as React from 'react'\n\nexport function useForceUpdate() {\n  const setState = React.useState(emptyObj)[1]\n  return React.useRef(() => setState({})).current\n}\n\nconst emptyObj = {}\n","import * as React from 'react'\nimport trieMemoize from 'trie-memoize'\nimport OneKeyMap from '@essentials/one-key-map'\nimport memoizeOne from '@essentials/memoize-one'\nimport useLatest from '@react-hook/latest'\nimport {elementsCache} from './elements-cache'\nimport {useForceUpdate} from './use-force-update'\nimport {Positioner} from './use-positioner'\n\n/**\n * This hook handles the render phases of the masonry layout and returns the grid as a React element.\n *\n * @param options Options for configuring the masonry layout renderer. See `UseMasonryOptions`.\n */\nexport function useMasonry<Item> ({\n  // Measurement and layout\n  positioner,\n  resizeObserver,\n  // Grid items\n  items,\n  // Container props\n  as: ContainerComponent = 'div',\n  id,\n  key,\n  className,\n  style,\n  role = 'grid',\n  tabIndex = 0,\n  containerRef,\n  // Item props\n  itemAs: ItemComponent = 'div',\n  itemStyle,\n  itemHeightEstimate = 300,\n  itemKey = defaultGetItemKey,\n  // Rendering props\n  overscanBy = 2,\n  scrollTop,\n  isScrolling,\n  height,\n  render: RenderComponent,\n  onRender\n}: UseMasonryOptions<Item>) {\n  let startIndex = 0\n  let stopIndex: number | undefined\n  const forceUpdate = useForceUpdate()\n  const setItemRef = getRefSetter(positioner, resizeObserver)\n  const itemCount = items.length\n  const {\n    columnWidth,\n    columnCount,\n    range,\n    estimateHeight,\n    size,\n    shortestColumn\n  } = positioner\n  const measuredCount = size()\n  const shortestColumnSize = shortestColumn()\n  const children: React.ReactElement[] = []\n  const itemRole =\n    role === 'list' ? 'listitem' : role === 'grid' ? 'gridcell' : undefined\n  const storedOnRender = useLatest(onRender)\n\n  overscanBy = height * overscanBy\n  const rangeEnd = scrollTop + overscanBy\n  const needsFreshBatch =\n    shortestColumnSize < rangeEnd && measuredCount < itemCount\n\n  range(\n    // We overscan in both directions because users scroll both ways,\n    // though one must admit scrolling down is more common and thus\n    // we only overscan by half the downward overscan amount\n    Math.max(0, scrollTop - overscanBy / 2),\n    rangeEnd,\n    (index, left, top) => {\n      const data = items[index]\n      const key = itemKey(data, index)\n      const phaseTwoStyle: React.CSSProperties = {\n        top,\n        left,\n        width: columnWidth,\n        writingMode: 'horizontal-tb',\n        position: 'absolute'\n      }\n\n      /* istanbul ignore next */\n      if (\n        typeof process !== 'undefined' &&\n        process.env.NODE_ENV !== 'production'\n      ) {\n        throwWithoutData(data, index)\n      }\n\n      children.push(\n        <ItemComponent\n          key={key}\n          ref={setItemRef(index)}\n          role={itemRole}\n          style={\n            typeof itemStyle === 'object' && itemStyle !== null\n              ? Object.assign({}, phaseTwoStyle, itemStyle)\n              : phaseTwoStyle\n          }\n        >\n          {createRenderElement(RenderComponent, index, data, columnWidth)}\n        </ItemComponent>\n      )\n\n      if (stopIndex === void 0) {\n        startIndex = index\n        stopIndex = index\n      } else {\n        startIndex = Math.min(startIndex, index)\n        stopIndex = Math.max(stopIndex, index)\n      }\n    }\n  )\n\n  if (needsFreshBatch) {\n    const batchSize = Math.min(\n      itemCount - measuredCount,\n      Math.ceil(\n        ((scrollTop + overscanBy - shortestColumnSize) / itemHeightEstimate) *\n          columnCount\n      )\n    )\n\n    let index = measuredCount\n    const phaseOneStyle = getCachedSize(columnWidth)\n\n    for (; index < measuredCount + batchSize; index++) {\n      const data = items[index]\n      const key = itemKey(data, index)\n\n      /* istanbul ignore next */\n      if (\n        typeof process !== 'undefined' &&\n        process.env.NODE_ENV !== 'production'\n      ) {\n        throwWithoutData(data, index)\n      }\n\n      children.push(\n        <ItemComponent\n          key={key}\n          ref={setItemRef(index)}\n          role={itemRole}\n          style={\n            typeof itemStyle === 'object'\n              ? Object.assign({}, phaseOneStyle, itemStyle)\n              : phaseOneStyle\n          }\n        >\n          {createRenderElement(RenderComponent, index, data, columnWidth)}\n        </ItemComponent>\n      )\n    }\n  }\n\n  // Calls the onRender callback if the rendered indices changed\n  React.useEffect(() => {\n    if (typeof storedOnRender.current === 'function' && stopIndex !== void 0)\n      storedOnRender.current(startIndex, stopIndex, items)\n\n    didEverMount = '1'\n  }, [startIndex, stopIndex, items, storedOnRender])\n  // If we needed a fresh batch we should reload our components with the measured\n  // sizes\n  React.useEffect(() => {\n    if (needsFreshBatch) forceUpdate()\n    // eslint-disable-next-line\n  }, [needsFreshBatch])\n\n  // gets the container style object based upon the estimated height and whether or not\n  // the page is being scrolled\n  const containerStyle = getContainerStyle(\n    isScrolling,\n    estimateHeight(itemCount, itemHeightEstimate)\n  )\n\n  return (\n    <ContainerComponent\n      ref={containerRef}\n      key={`${key || ''}-${didEverMount}`}\n      id={id}\n      role={role}\n      className={className}\n      tabIndex={tabIndex}\n      style={\n        typeof style === 'object'\n          ? assignUserStyle(containerStyle, style)\n          : containerStyle\n      }\n      children={children}\n    />\n  )\n}\n\n/* istanbul ignore next */\nfunction throwWithoutData (data: any, index: number) {\n  if (!data) {\n    throw new Error(\n      `No data was found at index: ${index}\\n\\n` +\n        `This usually happens when you've mutated or changed the \"items\" array in a ` +\n        `way that makes it shorter than the previous \"items\" array. Masonic knows nothing ` +\n        `about your underlying data and when it caches cell positions, it assumes you aren't ` +\n        `mutating the underlying \"items\".\\n\\n` +\n        `See https://codesandbox.io/s/masonic-w-react-router-example-2b5f9?file=/src/index.js for ` +\n        `an example that gets around this limitations. For advanced implementations, see ` +\n        `https://codesandbox.io/s/masonic-w-react-router-and-advanced-config-example-8em42?file=/src/index.js\\n\\n` +\n        `If this was the result of your removing an item from your \"items\", see this issue: ` +\n        `https://github.com/jaredLunde/masonic/issues/12`\n    )\n  }\n}\n\n// This is for triggering a remount after SSR has loaded in the client w/ hydrate()\nlet didEverMount = '0'\n\nexport interface UseMasonryOptions<Item> {\n  /**\n   * An array containing the data used by the grid items.\n   */\n  items: Item[]\n  /**\n   * A grid cell positioner and cache created by the `usePositioner()` hook or\n   * the `createPositioner` utility.\n   */\n  positioner: Positioner\n  /**\n   * A resize observer that tracks mutations to the grid cells and forces the\n   * Masonry grid to recalculate its layout if any cells affect column heights\n   * change. Check out the `useResizeObserver()` hook.\n   */\n  resizeObserver?: {\n    observe: ResizeObserver['observe']\n    disconnect: ResizeObserver['observe']\n    unobserve: ResizeObserver['unobserve']\n  }\n  /**\n   * This is the type of element the grid container will be rendered as.\n   * @default \"div\"`\n   */\n  as?: keyof JSX.IntrinsicElements | React.ComponentType<any>\n  /**\n   * Optionally gives the grid container an `id` prop.\n   */\n  id?: string\n  /**\n   * Prefix to key used for forcing re-renders\n   */\n  key?: string\n  /**\n   * Optionally gives the grid container a `className` prop.\n   */\n  className?: string\n  /**\n   * Adds extra `style` attributes to the container in addition to those\n   * created by the `useMasonry()` hook.\n   */\n  style?: React.CSSProperties\n  /**\n   * Optionally swap out the accessibility `role` prop of the container and its items.\n   * @default \"grid\"\n   */\n  role?: 'grid' | 'list'\n  /**\n   * Change the `tabIndex` of the grid container.\n   * @default 0\n   */\n  tabIndex?: number\n  /**\n   * Forwards a React ref to the grid container.\n   */\n  containerRef?:\n    | ((element: HTMLElement) => void)\n    | React.MutableRefObject<HTMLElement | null>\n  /**\n   * This is the type of element the grid items will be rendered as.\n   * @default \"div\"\n   */\n  itemAs?: keyof JSX.IntrinsicElements | React.ComponentType<any>\n  /**\n   * Adds extra `style` attributes to the grid items in addition to those\n   * created by the `useMasonry()` hook.\n   */\n  itemStyle?: React.CSSProperties\n  /**\n   * This value is used for estimating the initial height of the masonry grid. It is important for\n   * the UX of the scrolling behavior and in determining how many `items` to render in a batch, so it's\n   * wise to set this value with some level accuracy, though it doesn't need to be perfect.\n   * @default 300\n   */\n  itemHeightEstimate?: number\n  /**\n   * The value returned here must be unique to the item. By default, the key is the item's index. This is ok\n   * if your collection of items is never modified. Setting this property ensures that the component in `render`\n   * is reused each time the masonry grid is reflowed. A common pattern would be to return the item's database\n   * ID here if there is one, e.g. `data => data.id`\n   * @default (data, index) => index`\n   */\n  itemKey?: (data: Item, index: number) => string | number\n  /**\n   * This number is used for determining the number of grid cells outside of the visible window to render.\n   * The default value is `2` which means \"render 2 windows worth (2 * `height`) of content before and after\n   * the items in the visible window\". A value of `3` would be 3 windows worth of grid cells, so it's a\n   * linear relationship.\n   *\n   * Overscanning is important for preventing tearing when scrolling through items in the grid, but setting\n   * too high of a vaimport { useForceUpdate } from './use-force-update';\nlue may create too much work for React to handle, so it's best that you tune this\n   * value accordingly.\n   * @default 2\n   */\n  overscanBy?: number\n\n  /**\n   * This is the height of the window. If you're rendering the grid relative to the browser `window`,\n   * the current `document.documentElement.clientHeight` is the value you'll want to set here. If you're\n   * rendering the grid inside of another HTML element, you'll want to provide the current `element.offsetHeight`\n   * here.\n   */\n  height: number\n  /**\n   * The current scroll progress in pixel of the window the grid is rendered in. If you're rendering\n   * the grid relative to the browser `window`, you'll want the most current `window.scrollY` here.\n   * If you're rendering the grid inside of another HTML element, you'll want the current `element.scrollTop`\n   * value here. The `useScroller()` hook and `<MasonryScroller>` components will help you if you're\n   * rendering the grid relative to the browser `window`.\n   */\n  scrollTop: number\n  /**\n   * This property is used for determining whether or not the grid container should add styles that\n   * dramatically increase scroll performance. That is, turning off `pointer-events` and adding a\n   * `will-change: contents;` value to the style string. You can forgo using this prop, but I would\n   * not recommend that. The `useScroller()` hook and `<MasonryScroller>` components will help you if\n   * you're rendering the grid relative to the browser `window`.\n   * @default false\n   */\n  isScrolling?: boolean\n  /**\n   * This component is rendered for each item of your `items` prop array. It should accept three props:\n   * `index`, `width`, and `data`. See RenderComponentProps.\n   */\n  render: React.ComponentType<RenderComponentProps<Item>>\n  /**\n   * This callback is invoked any time the items currently being rendered by the grid change.\n   */\n  onRender?: (startIndex: number, stopIndex: number, items: Item[]) => void\n}\n\nexport interface RenderComponentProps<Item> {\n  /**\n   * The index of the cell in the `items` prop array.\n   */\n  index: number\n  /**\n   * The rendered width of the cell's column.\n   */\n  width: number\n  /**\n   * The data at `items[index]` of your `items` prop array.\n   */\n  data: Item\n}\n\n//\n// Render-phase utilities\n\n// ~5.5x faster than createElement without the memo\nconst createRenderElement = trieMemoize(\n  [OneKeyMap, {}, WeakMap, OneKeyMap],\n  (RenderComponent, index, data, columnWidth) => (\n    <RenderComponent index={index} data={data} width={columnWidth} />\n  )\n)\n\nconst getContainerStyle = memoizeOne(\n  (isScrolling: boolean | undefined, estimateHeight: number) => ({\n    position: 'relative',\n    width: '100%',\n    maxWidth: '100%',\n    height: Math.ceil(estimateHeight),\n    maxHeight: Math.ceil(estimateHeight),\n    willChange: isScrolling ? 'contents' : void 0,\n    pointerEvents: isScrolling ? 'none' : void 0\n  })\n)\n\nconst cmp2 = (args: IArguments, pargs: IArguments | any[]): boolean =>\n  args[0] === pargs[0] && args[1] === pargs[1]\n\nconst assignUserStyle = memoizeOne(\n  (containerStyle, userStyle) => Object.assign({}, containerStyle, userStyle),\n  // @ts-ignore\n  cmp2\n)\n\nfunction defaultGetItemKey<Item> (_: Item, i: number) {\n  return i\n}\n\n// the below memoizations for for ensuring shallow equal is reliable for pure\n// component children\nconst getCachedSize = memoizeOne(\n  (width: number): React.CSSProperties => ({\n    width,\n    zIndex: -1000,\n    visibility: 'hidden',\n    position: 'absolute',\n    writingMode: 'horizontal-tb'\n  }),\n  (args, pargs) => args[0] === pargs[0]\n)\n\nconst getRefSetter = memoizeOne(\n  (\n    positioner: Positioner,\n    resizeObserver?: UseMasonryOptions<any>['resizeObserver']\n  ) => (index: number) => (el: HTMLElement | null): void => {\n    if (el === null) return\n    if (resizeObserver) {\n      resizeObserver.observe(el)\n      elementsCache.set(el, index)\n    }\n    if (positioner.get(index) === void 0) positioner.set(index, el.offsetHeight)\n  },\n  // @ts-ignore\n  cmp2\n)\n","import {useScroller} from './use-scroller'\nimport {useMasonry} from './use-masonry'\nimport type {UseMasonryOptions} from './use-masonry'\n/**\n * A heavily-optimized component that updates `useMasonry()` when the scroll position of the browser `window`\n * changes. This bare-metal component is used by `<Masonry>` under the hood.\n */\nexport function MasonryScroller<Item>(props: MasonryScrollerProps<Item>) {\n  // We put this in its own layer because it's the thing that will trigger the most updates\n  // and we don't want to slower ourselves by cycling through all the functions, objects, and effects\n  // of other hooks\n  const {scrollTop, isScrolling} = useScroller(props.offset, props.scrollFps)\n  // This is an update-heavy phase and while we could just Object.assign here,\n  // it is way faster to inline and there's a relatively low hit to he bundle\n  // size.\n  return useMasonry<Item>({\n    scrollTop,\n    isScrolling,\n    positioner: props.positioner,\n    resizeObserver: props.resizeObserver,\n    items: props.items,\n    onRender: props.onRender,\n    as: props.as,\n    id: props.id,\n    className: props.className,\n    style: props.style,\n    role: props.role,\n    tabIndex: props.tabIndex,\n    containerRef: props.containerRef,\n    itemAs: props.itemAs,\n    itemStyle: props.itemStyle,\n    itemHeightEstimate: props.itemHeightEstimate,\n    itemKey: props.itemKey,\n    overscanBy: props.overscanBy,\n    height: props.height,\n    render: props.render,\n  })\n}\n\nexport interface MasonryScrollerProps<Item>\n  extends Omit<UseMasonryOptions<Item>, 'scrollTop' | 'isScrolling'> {\n  /**\n   * This determines how often (in frames per second) to update the scroll position of the\n   * browser `window` in state, and as a result the rate the masonry grid recalculates its visible cells.\n   * The default value of `12` has been very reasonable in my own testing, but if you have particularly\n   * heavy `render` components it may be prudent to reduce this number.\n   * @default 12\n   */\n  scrollFps?: number\n  /**\n   * The vertical space in pixels between the top of the grid container and the top\n   * of the browser `document.documentElement`.\n   * @default 0\n   */\n  offset?: number\n}\n\nif (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\n  MasonryScroller.displayName = 'MasonryScroller'\n}\n","import * as React from 'react'\nimport useLayoutEffect from '@react-hook/passive-layout-effect'\n\n/**\n * A hook for measuring the width of the grid container, as well as its distance\n * from the top of the document. These values are necessary to correctly calculate the number/width\n * of columns to render, as well as the number of rows to render.\n *\n * @param elementRef A `ref` object created by `React.useRef()`. That ref should be provided to the\n *   `containerRef` property in `useMasonry()`.\n * @param deps You can force this hook to recalculate the `offset` and `width` whenever this\n *   dependencies list changes. A common dependencies list might look like `[windowWidth, windowHeight]`,\n *   which would force the hook to recalculate any time the size of the browser `window` changed.\n */\nexport function useContainerPosition(\n  elementRef: React.MutableRefObject<HTMLElement | null>,\n  deps: React.DependencyList = emptyArr\n): ContainerPosition {\n  const [containerPosition, setContainerPosition] = React.useState<\n    ContainerPosition\n  >({offset: 0, width: 0})\n\n  useLayoutEffect(() => {\n    const {current} = elementRef\n    if (current !== null) {\n      let offset = 0\n      let el = current\n\n      do {\n        offset += el.offsetTop || 0\n        el = el.offsetParent as HTMLElement\n      } while (el)\n\n      if (\n        offset !== containerPosition.offset ||\n        current.offsetWidth !== containerPosition.width\n      ) {\n        setContainerPosition({\n          offset,\n          width: current.offsetWidth,\n        })\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps)\n\n  return containerPosition\n}\n\nexport interface ContainerPosition {\n  /**\n   * The distance in pixels between the top of the element in `elementRef` and the top of\n   * the `document.documentElement`.\n   */\n  offset: number\n  /**\n   * The `offsetWidth` of the element in `elementRef`.\n   */\n  width: number\n}\n\nconst emptyArr: [] = []\n","import * as React from 'react'\nimport trieMemoize from 'trie-memoize'\nimport ResizeObserver from 'resize-observer-polyfill'\nimport rafSchd from 'raf-schd'\nimport {elementsCache} from './elements-cache'\nimport {useForceUpdate} from './use-force-update'\nimport type {Positioner} from './use-positioner'\n\n/**\n * Creates a resize observer that forces updates to the grid cell positions when mutations are\n * made to cells affecting their height.\n *\n * @param positioner The masonry cell positioner created by the `usePositioner()` hook.\n */\nexport function useResizeObserver(positioner: Positioner) {\n  const forceUpdate = useForceUpdate()\n  const resizeObserver = createResizeObserver(positioner, forceUpdate)\n  // Cleans up the resize observers when they change or the\n  // component unmounts\n  React.useEffect(() => () => resizeObserver.disconnect(), [resizeObserver])\n  return resizeObserver\n}\n\n/**\n * Creates a resize observer that fires an `updater` callback whenever the height of\n * one or many cells change. The `useResizeObserver()` hook is using this under the hood.\n *\n * @param positioner A cell positioner created by the `usePositioner()` hook or the `createPositioner()` utility\n * @param updater A callback that fires whenever one or many cell heights change.\n */\nexport const createResizeObserver = trieMemoize(\n  [WeakMap],\n  // TODO: figure out a way to test this\n  /* istanbul ignore next */\n  (positioner: Positioner, updater: (updates: number[]) => void) => {\n    const handleEntries = rafSchd(((entries) => {\n      const updates: number[] = []\n      let i = 0\n\n      for (; i < entries.length; i++) {\n        const entry = entries[i]\n        const height = (entry.target as HTMLElement).offsetHeight\n\n        if (height > 0) {\n          const index = elementsCache.get(entry.target)\n\n          if (index !== void 0) {\n            const position = positioner.get(index)\n\n            if (position !== void 0 && height !== position.height)\n              updates.push(index, height)\n          }\n        }\n      }\n\n      if (updates.length > 0) {\n        // Updates the size/positions of the cell with the resize\n        // observer updates\n        positioner.update(updates)\n        updater(updates)\n      }\n    }) as ResizeObserverCallback)\n\n    const ro = new ResizeObserver(handleEntries)\n    // Overrides the original disconnect to include cancelling handling the entries.\n    // Ideally this would be its own method but that would result in a breaking\n    // change.\n    const disconnect = ro.disconnect.bind(ro)\n    ro.disconnect = () => {\n      disconnect()\n      handleEntries.cancel()\n    }\n\n    return ro\n  }\n)\n","type Color = 0 | 1 | 2\nconst RED = 0\nconst BLACK = 1\nconst NIL = 2\n\nconst DELETE = 0\nconst KEEP = 1\n\ntype ListNode = {\n  index: number\n  high: number\n  next: ListNode | null\n}\n\ninterface TreeNode {\n  max: number\n  low: number\n  high: number\n  // color\n  C: Color\n  // P\n  P: TreeNode\n  // right\n  R: TreeNode\n  // left\n  L: TreeNode\n  list: ListNode\n}\n\ninterface Tree {\n  root: TreeNode\n  size: number\n}\n\nfunction addInterval(treeNode: TreeNode, high: number, index: number): boolean {\n  let node: ListNode | null = treeNode.list\n  let prevNode: ListNode | undefined\n\n  while (node) {\n    if (node.index === index) return false\n    if (high > node.high) break\n    prevNode = node\n    node = node.next\n  }\n\n  if (!prevNode) treeNode.list = {index, high, next: node}\n  if (prevNode) prevNode.next = {index, high, next: prevNode.next}\n\n  return true\n}\n\nfunction removeInterval(treeNode: TreeNode, index: number) {\n  let node: ListNode | null = treeNode.list\n  if (node.index === index) {\n    if (node.next === null) return DELETE\n    treeNode.list = node.next\n    return KEEP\n  }\n\n  let prevNode: ListNode | undefined = node\n  node = node.next\n\n  while (node !== null) {\n    if (node.index === index) {\n      prevNode.next = node.next\n      return KEEP\n    }\n    prevNode = node\n    node = node.next\n  }\n}\n\nconst NULL_NODE: TreeNode = {\n  low: 0,\n  max: 0,\n  high: 0,\n  C: NIL,\n  // @ts-ignore\n  P: undefined,\n  // @ts-ignore\n  R: undefined,\n  // @ts-ignore\n  L: undefined,\n  // @ts-ignore\n  list: undefined,\n}\n\nNULL_NODE.P = NULL_NODE\nNULL_NODE.L = NULL_NODE\nNULL_NODE.R = NULL_NODE\n\nfunction updateMax(node: TreeNode) {\n  const max = node.high\n  if (node.L === NULL_NODE && node.R === NULL_NODE) node.max = max\n  else if (node.L === NULL_NODE) node.max = Math.max(node.R.max, max)\n  else if (node.R === NULL_NODE) node.max = Math.max(node.L.max, max)\n  else node.max = Math.max(Math.max(node.L.max, node.R.max), max)\n}\n\nfunction updateMaxUp(node: TreeNode) {\n  let x = node\n\n  while (x.P !== NULL_NODE) {\n    updateMax(x.P)\n    x = x.P\n  }\n}\n\nfunction rotateLeft(tree: Tree, x: TreeNode) {\n  if (x.R === NULL_NODE) return\n  const y = x.R\n  x.R = y.L\n  if (y.L !== NULL_NODE) y.L.P = x\n  y.P = x.P\n\n  if (x.P === NULL_NODE) tree.root = y\n  else {\n    if (x === x.P.L) x.P.L = y\n    else x.P.R = y\n  }\n\n  y.L = x\n  x.P = y\n\n  updateMax(x)\n  updateMax(y)\n}\n\nfunction rotateRight(tree: Tree, x: TreeNode) {\n  if (x.L === NULL_NODE) return\n  const y = x.L\n  x.L = y.R\n  if (y.R !== NULL_NODE) y.R.P = x\n  y.P = x.P\n\n  if (x.P === NULL_NODE) tree.root = y\n  else {\n    if (x === x.P.R) x.P.R = y\n    else x.P.L = y\n  }\n\n  y.R = x\n  x.P = y\n\n  updateMax(x)\n  updateMax(y)\n}\n\nfunction replaceNode(tree: Tree, x: TreeNode, y: TreeNode) {\n  if (x.P === NULL_NODE) tree.root = y\n  else if (x === x.P.L) x.P.L = y\n  else x.P.R = y\n  y.P = x.P\n}\n\nfunction fixRemove(tree: Tree, x: TreeNode) {\n  let w\n\n  while (x !== NULL_NODE && x.C === BLACK) {\n    if (x === x.P.L) {\n      w = x.P.R\n\n      if (w.C === RED) {\n        w.C = BLACK\n        x.P.C = RED\n        rotateLeft(tree, x.P)\n        w = x.P.R\n      }\n\n      if (w.L.C === BLACK && w.R.C === BLACK) {\n        w.C = RED\n        x = x.P\n      } else {\n        if (w.R.C === BLACK) {\n          w.L.C = BLACK\n          w.C = RED\n          rotateRight(tree, w)\n          w = x.P.R\n        }\n\n        w.C = x.P.C\n        x.P.C = BLACK\n        w.R.C = BLACK\n        rotateLeft(tree, x.P)\n        x = tree.root\n      }\n    } else {\n      w = x.P.L\n\n      if (w.C === RED) {\n        w.C = BLACK\n        x.P.C = RED\n        rotateRight(tree, x.P)\n        w = x.P.L\n      }\n\n      if (w.R.C === BLACK && w.L.C === BLACK) {\n        w.C = RED\n        x = x.P\n      } else {\n        if (w.L.C === BLACK) {\n          w.R.C = BLACK\n          w.C = RED\n          rotateLeft(tree, w)\n          w = x.P.L\n        }\n\n        w.C = x.P.C\n        x.P.C = BLACK\n        w.L.C = BLACK\n        rotateRight(tree, x.P)\n        x = tree.root\n      }\n    }\n  }\n\n  x.C = BLACK\n}\n\nfunction minimumTree(x: TreeNode) {\n  while (x.L !== NULL_NODE) x = x.L\n  return x\n}\n\nfunction fixInsert(tree: Tree, z: TreeNode) {\n  let y: TreeNode\n  while (z.P.C === RED) {\n    if (z.P === z.P.P.L) {\n      y = z.P.P.R\n\n      if (y.C === RED) {\n        z.P.C = BLACK\n        y.C = BLACK\n        z.P.P.C = RED\n        z = z.P.P\n      } else {\n        if (z === z.P.R) {\n          z = z.P\n          rotateLeft(tree, z)\n        }\n\n        z.P.C = BLACK\n        z.P.P.C = RED\n        rotateRight(tree, z.P.P)\n      }\n    } else {\n      y = z.P.P.L\n\n      if (y.C === RED) {\n        z.P.C = BLACK\n        y.C = BLACK\n        z.P.P.C = RED\n        z = z.P.P\n      } else {\n        if (z === z.P.L) {\n          z = z.P\n          rotateRight(tree, z)\n        }\n\n        z.P.C = BLACK\n        z.P.P.C = RED\n        rotateLeft(tree, z.P.P)\n      }\n    }\n  }\n  tree.root.C = BLACK\n}\n\nexport interface IIntervalTree {\n  insert(low: number, high: number, index: number): void\n  remove(index: number): void\n  search(\n    low: number,\n    high: number,\n    callback: (index: number, low: number) => any\n  ): void\n  size: number\n}\n\nexport function createIntervalTree(): IIntervalTree {\n  const tree = {\n    root: NULL_NODE,\n    size: 0,\n  }\n  // we know these indexes are a consistent, safe way to make look ups\n  // for our case so it's a solid O(1) alternative to\n  // the O(log n) searchNode() in typical interval trees\n  const indexMap: Record<number, TreeNode> = {}\n\n  return {\n    insert(low, high, index) {\n      let x: TreeNode = tree.root\n      let y: TreeNode = NULL_NODE\n\n      while (x !== NULL_NODE) {\n        y = x\n        if (low === y.low) break\n        if (low < x.low) x = x.L\n        else x = x.R\n      }\n\n      if (low === y.low && y !== NULL_NODE) {\n        if (!addInterval(y, high, index)) return\n        y.high = Math.max(y.high, high)\n        updateMax(y)\n        updateMaxUp(y)\n        indexMap[index] = y\n        tree.size++\n        return\n      }\n\n      const z: TreeNode = {\n        low,\n        high,\n        max: high,\n        C: RED,\n        P: y,\n        L: NULL_NODE,\n        R: NULL_NODE,\n        list: {index, high, next: null},\n      }\n\n      if (y === NULL_NODE) {\n        tree.root = z\n      } else {\n        if (z.low < y.low) y.L = z\n        else y.R = z\n        updateMaxUp(z)\n      }\n\n      fixInsert(tree, z)\n      indexMap[index] = z\n      tree.size++\n    },\n\n    remove(index) {\n      const z = indexMap[index]\n      if (z === void 0) return\n      delete indexMap[index]\n\n      const intervalResult = removeInterval(z, index)\n      if (intervalResult === void 0) return\n      if (intervalResult === KEEP) {\n        z.high = z.list.high\n        updateMax(z)\n        updateMaxUp(z)\n        tree.size--\n        return\n      }\n\n      let y = z\n      let originalYColor = y.C\n      let x: TreeNode\n\n      if (z.L === NULL_NODE) {\n        x = z.R\n        replaceNode(tree, z, z.R)\n      } else if (z.R === NULL_NODE) {\n        x = z.L\n        replaceNode(tree, z, z.L)\n      } else {\n        y = minimumTree(z.R)\n        originalYColor = y.C\n        x = y.R\n\n        if (y.P === z) {\n          x.P = y\n        } else {\n          replaceNode(tree, y, y.R)\n          y.R = z.R\n          y.R.P = y\n        }\n\n        replaceNode(tree, z, y)\n        y.L = z.L\n        y.L.P = y\n        y.C = z.C\n      }\n\n      updateMax(x)\n      updateMaxUp(x)\n\n      if (originalYColor === BLACK) fixRemove(tree, x)\n      tree.size--\n    },\n\n    search(low, high, callback) {\n      const stack = [tree.root]\n      while (stack.length !== 0) {\n        const node = stack.pop() as TreeNode\n        if (node === NULL_NODE || low > node.max) continue\n        if (node.L !== NULL_NODE) stack.push(node.L)\n        if (node.R !== NULL_NODE) stack.push(node.R)\n        if (node.low <= high && node.high >= low) {\n          let curr: ListNode | null = node.list\n          while (curr !== null) {\n            if (curr.high >= low) callback(curr.index, node.low)\n            curr = curr.next\n          }\n        }\n      }\n    },\n\n    get size() {\n      return tree.size\n    },\n  }\n}\n","import * as React from 'react'\nimport {createIntervalTree} from './interval-tree'\n\n/**\n * This hook creates the grid cell positioner and cache required by `useMasonry()`. This is\n * the meat of the grid's layout algorithm, determining which cells to render at a given scroll\n * position, as well as where to place new items in the grid.\n *\n * @param options Properties that determine the number of columns in the grid, as well\n *  as their widths.\n * @param deps This hook will create a new positioner, clearing all existing cached positions,\n *  whenever the dependencies in this list change.\n */\nexport function usePositioner(\n  {\n    width,\n    columnWidth = 200,\n    columnGutter = 0,\n    columnCount,\n  }: UsePositionerOptions,\n  deps: React.DependencyList = emptyArr\n): Positioner {\n  const initPositioner = (): Positioner => {\n    const [computedColumnWidth, computedColumnCount] = getColumns(\n      width,\n      columnWidth,\n      columnGutter,\n      columnCount\n    )\n    return createPositioner(\n      computedColumnCount,\n      computedColumnWidth,\n      columnGutter\n    )\n  }\n  const positionerRef = React.useRef<Positioner>()\n  if (positionerRef.current === undefined)\n    positionerRef.current = initPositioner()\n\n  const prevDeps = React.useRef(deps)\n  const opts = [width, columnWidth, columnGutter, columnCount]\n  const prevOpts = React.useRef(opts)\n  const optsChanged = !opts.every((item, i) => prevOpts.current[i] === item)\n\n  if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\n    if (deps.length !== prevDeps.current.length) {\n      throw new Error(\n        'usePositioner(): The length of your dependencies array changed.'\n      )\n    }\n  }\n\n  // Create a new positioner when the dependencies or sizes change\n  // Thanks to https://github.com/khmm12 for pointing this out\n  // https://github.com/jaredLunde/masonic/pull/41\n  if (optsChanged || !deps.every((item, i) => prevDeps.current[i] === item)) {\n    const prevPositioner = positionerRef.current\n    const positioner = initPositioner()\n    prevDeps.current = deps\n    prevOpts.current = opts\n\n    if (optsChanged) {\n      const cacheSize = prevPositioner.size()\n      for (let index = 0; index < cacheSize; index++) {\n        const pos = prevPositioner.get(index)\n        positioner.set(index, pos !== void 0 ? pos.height : 0)\n      }\n    }\n\n    positionerRef.current = positioner\n  }\n\n  return positionerRef.current\n}\n\nexport interface UsePositionerOptions {\n  /**\n   * The width of the container you're rendering the grid within, i.e. the container\n   * element's `element.offsetWidth`\n   */\n  width: number\n  /**\n   * The minimum column width. The `usePositioner()` hook will automatically size the\n   * columns to fill their container based upon the `columnWidth` and `columnGutter` values.\n   * It will never render anything smaller than this width unless its container itself is\n   * smaller than its value. This property is optional if you're using a static `columnCount`.\n   * @default 200\n   */\n  columnWidth?: number\n  /**\n   * This sets the vertical and horizontal space between grid cells in pixels.\n   */\n  columnGutter?: number\n  /**\n   * By default, `usePositioner()` derives the column count from the `columnWidth`, `columnGutter`,\n   * and `width` props. However, in some situations it is nice to be able to override that behavior\n   * (e.g. creating a `List` component).\n   */\n  columnCount?: number\n}\n\n/**\n * Creates a cell positioner for the `useMasonry()` hook. The `usePositioner()` hook uses\n * this utility under the hood.\n *\n * @param columnCount The number of columns in the grid\n * @param columnWidth The width of each column in the grid\n * @param columnGutter The amount of horizontal and vertical space in pixels to render\n *  between each grid item.\n */\nexport const createPositioner = (\n  columnCount: number,\n  columnWidth: number,\n  columnGutter = 0\n): Positioner => {\n  // O(log(n)) lookup of cells to render for a given viewport size\n  // Store tops and bottoms of each cell for fast intersection lookup.\n  const intervalTree = createIntervalTree()\n  // Track the height of each column.\n  // Layout algorithm below always inserts into the shortest column.\n  const columnHeights: number[] = new Array(columnCount)\n  // Used for O(1) item access\n  const items: PositionerItem[] = []\n  // Tracks the item indexes within an individual column\n  const columnItems: number[][] = new Array(columnCount)\n\n  for (let i = 0; i < columnCount; i++) {\n    columnHeights[i] = 0\n    columnItems[i] = []\n  }\n\n  return {\n    columnCount,\n    columnWidth,\n    set: (index, height = 0) => {\n      let column = 0\n\n      // finds the shortest column and uses it\n      for (let i = 1; i < columnHeights.length; i++) {\n        if (columnHeights[i] < columnHeights[column]) column = i\n      }\n\n      const top = columnHeights[column] || 0\n      columnHeights[column] = top + height + columnGutter\n      columnItems[column].push(index)\n      items[index] = {\n        left: column * (columnWidth + columnGutter),\n        top,\n        height,\n        column,\n      }\n      intervalTree.insert(top, top + height, index)\n    },\n    get: (index) => items[index],\n    // This only updates items in the specific columns that have changed, on and after the\n    // specific items that have changed\n    update: (updates) => {\n      const columns: number[] = new Array(columnCount)\n      let i = 0,\n        j = 0\n\n      // determines which columns have items that changed, as well as the minimum index\n      // changed in that column, as all items after that index will have their positions\n      // affected by the change\n      for (; i < updates.length - 1; i++) {\n        const index = updates[i]\n        const item = items[index]\n        item.height = updates[++i]\n        intervalTree.remove(index)\n        intervalTree.insert(item.top, item.top + item.height, index)\n        columns[item.column] =\n          columns[item.column] === void 0\n            ? index\n            : Math.min(index, columns[item.column])\n      }\n\n      for (i = 0; i < columns.length; i++) {\n        // bails out if the column didn't change\n        if (columns[i] === void 0) continue\n        const itemsInColumn = columnItems[i]\n        // the index order is sorted with certainty so binary search is a great solution\n        // here as opposed to Array.indexOf()\n        const startIndex = binarySearch(itemsInColumn, columns[i])\n        const index = columnItems[i][startIndex]\n        const startItem = items[index]\n        columnHeights[i] = startItem.top + startItem.height + columnGutter\n\n        for (j = startIndex + 1; j < itemsInColumn.length; j++) {\n          const index = itemsInColumn[j]\n          const item = items[index]\n          item.top = columnHeights[i]\n          columnHeights[i] = item.top + item.height + columnGutter\n          intervalTree.remove(index)\n          intervalTree.insert(item.top, item.top + item.height, index)\n        }\n      }\n    },\n    // Render all cells visible within the viewport range defined.\n    range: (lo, hi, renderCallback) =>\n      intervalTree.search(lo, hi, (index, top) =>\n        renderCallback(index, items[index].left, top)\n      ),\n    estimateHeight: (itemCount, defaultItemHeight): number => {\n      const tallestColumn = Math.max(0, Math.max.apply(null, columnHeights))\n\n      return itemCount === intervalTree.size\n        ? tallestColumn\n        : tallestColumn +\n            Math.ceil((itemCount - intervalTree.size) / columnCount) *\n              defaultItemHeight\n    },\n    shortestColumn: () => {\n      if (columnHeights.length > 1) return Math.min.apply(null, columnHeights)\n      return columnHeights[0] || 0\n    },\n    size(): number {\n      return intervalTree.size\n    },\n  }\n}\n\nexport interface Positioner {\n  /**\n   * The number of columns in the grid\n   */\n  columnCount: number\n  /**\n   * The width of each column in the grid\n   */\n  columnWidth: number\n  /**\n   * Sets the position for the cell at `index` based upon the cell's height\n   */\n  set: (index: number, height: number) => void\n  /**\n   * Gets the `PositionerItem` for the cell at `index`\n   */\n  get: (index: number) => PositionerItem | undefined\n  /**\n   * Updates cells based on their indexes and heights\n   * positioner.update([index, height, index, height, index, height...])\n   */\n  update: (updates: number[]) => void\n  /**\n   * Searches the interval tree for grid cells with a `top` value in\n   * betwen `lo` and `hi` and invokes the callback for each item that\n   * is discovered\n   */\n  range: (\n    lo: number,\n    hi: number,\n    renderCallback: (index: number, left: number, top: number) => void\n  ) => void\n  /**\n   * Returns the number of grid cells in the cache\n   */\n\n  size: () => number\n  /**\n   * Estimates the total height of the grid\n   */\n\n  estimateHeight: (itemCount: number, defaultItemHeight: number) => number\n  /**\n   * Returns the height of the shortest column in the grid\n   */\n\n  shortestColumn: () => number\n}\n\nexport interface PositionerItem {\n  /**\n   * This is how far from the top edge of the grid container in pixels the\n   * item is placed\n   */\n  top: number\n  /**\n   * This is how far from the left edge of the grid container in pixels the\n   * item is placed\n   */\n  left: number\n  /**\n   * This is the height of the grid cell\n   */\n  height: number\n  /**\n   * This is the column number containing the grid cell\n   */\n  column: number\n}\n\n/* istanbul ignore next */\nconst binarySearch = (a: number[], y: number): number => {\n  let l = 0\n  let h = a.length - 1\n\n  while (l <= h) {\n    const m = (l + h) >>> 1\n    const x = a[m]\n    if (x === y) return m\n    else if (x <= y) l = m + 1\n    else h = m - 1\n  }\n\n  return -1\n}\n\nconst getColumns = (\n  width = 0,\n  minimumWidth = 0,\n  gutter = 8,\n  columnCount?: number\n): [number, number] => {\n  columnCount = columnCount || Math.floor(width / (minimumWidth + gutter)) || 1\n  const columnWidth = Math.floor(\n    (width - gutter * (columnCount - 1)) / columnCount\n  )\n  return [columnWidth, columnCount]\n}\n\nconst emptyArr: [] = []\n","import * as React from 'react'\nimport useLatest from '@react-hook/latest'\nimport useEvent from '@react-hook/event'\nimport {useThrottleCallback} from '@react-hook/throttle'\nimport type {Positioner, PositionerItem} from './use-positioner'\n\n/**\n * A hook that creates a callback for scrolling to a specific index in\n * the \"items\" array.\n *\n * @param positioner A positioner created by the `usePositioner()` hook\n * @param options Configuration options\n */\nexport function useScrollToIndex(\n  positioner: Positioner,\n  options: UseScrollToIndexOptions\n) {\n  const {\n    align = 'top',\n    element = typeof window !== 'undefined' && window,\n    offset = 0,\n    height = typeof window !== 'undefined' ? window.innerHeight : 0,\n  } = options\n  const latestOptions = useLatest({\n    positioner,\n    element,\n    align,\n    offset,\n    height,\n  } as const)\n  const getTarget = React.useRef(() => {\n    const latestElement = latestOptions.current.element\n    return latestElement && 'current' in latestElement\n      ? latestElement.current\n      : latestElement\n  }).current\n  const [state, dispatch] = React.useReducer(\n    (\n      state: {\n        position: PositionerItem | undefined\n        index: number | undefined\n        prevTop: number | undefined\n      },\n      action:\n        | {type: 'scrollToIndex'; value: number | undefined}\n        | {type: 'setPosition'; value: PositionerItem | undefined}\n        | {type: 'setPrevTop'; value: number | undefined}\n        | {type: 'reset'}\n    ) => {\n      const nextState = {\n        position: state.position,\n        index: state.index,\n        prevTop: state.prevTop,\n      }\n\n      /* istanbul ignore next */\n      if (action.type === 'scrollToIndex') {\n        return {\n          position: latestOptions.current.positioner.get(action.value ?? -1),\n          index: action.value,\n          prevTop: void 0,\n        }\n      } else if (action.type === 'setPosition') {\n        nextState.position = action.value\n      } else if (action.type === 'setPrevTop') {\n        nextState.prevTop = action.value\n      } else if (action.type === 'reset') {\n        return defaultState\n      }\n\n      return nextState\n    },\n    defaultState\n  )\n  const throttledDispatch = useThrottleCallback(dispatch, 15)\n\n  // If we find the position along the way we can immediately take off\n  // to the correct spot.\n  useEvent(getTarget() as Window, 'scroll', () => {\n    if (!state.position && state.index) {\n      const position = latestOptions.current.positioner.get(state.index)\n\n      if (position) {\n        dispatch({type: 'setPosition', value: position})\n      }\n    }\n  })\n\n  // If the top changes out from under us in the case of dynamic cells, we\n  // want to keep following it.\n  const currentTop =\n    state.index !== void 0 &&\n    latestOptions.current.positioner.get(state.index)?.top\n\n  React.useEffect(() => {\n    const target = getTarget()\n    if (!target) return\n    const {height, align, offset, positioner} = latestOptions.current\n\n    if (state.position) {\n      let scrollTop = state.position.top\n\n      if (align === 'bottom') {\n        scrollTop = scrollTop - height + state.position.height\n      } else if (align === 'center') {\n        scrollTop -= (height - state.position.height) / 2\n      }\n\n      target.scrollTo(0, Math.max(0, (scrollTop += offset)))\n      // Resets state after 400ms, an arbitrary time I determined to be\n      // still visually pleasing if there is a slow network reply in dynamic\n      // cells\n      let didUnsubscribe = false\n      const timeout = setTimeout(\n        () => !didUnsubscribe && dispatch({type: 'reset'}),\n        400\n      )\n      return () => {\n        didUnsubscribe = true\n        clearTimeout(timeout)\n      }\n    } else if (state.index !== void 0) {\n      // Estimates the top based upon the average height of current cells\n      let estimatedTop =\n        (positioner.shortestColumn() / positioner.size()) * state.index\n      if (state.prevTop)\n        estimatedTop = Math.max(estimatedTop, state.prevTop + height)\n      target.scrollTo(0, estimatedTop)\n      throttledDispatch({type: 'setPrevTop', value: estimatedTop})\n    }\n  }, [currentTop, state, latestOptions, getTarget, throttledDispatch])\n\n  return React.useRef((index: number) => {\n    dispatch({type: 'scrollToIndex', value: index})\n  }).current\n}\n\nconst defaultState = {\n  index: void 0,\n  position: void 0,\n  prevTop: void 0,\n} as const\n\nexport type UseScrollToIndexOptions = {\n  /**\n   * The window element or a React ref for the window element. That is,\n   * this is the grid container.\n   * @default window\n   */\n  element?: Window | HTMLElement | React.RefObject<HTMLElement> | null\n  /**\n   * Sets the vertical alignment of the cell within the grid container.\n   * @default \"top\"\n   */\n  align?: 'center' | 'top' | 'bottom'\n  /**\n   * The height of the grid.\n   * @default window.innerHeight\n   */\n  height?: number\n  /**\n   * The vertical space in pixels between the top of the grid container and the top\n   * of the window.\n   * @default 0\n   */\n  offset?: number\n}\n","import * as React from 'react'\nimport {useWindowSize} from '@react-hook/window-size'\nimport {MasonryScroller} from './masonry-scroller'\nimport type {MasonryScrollerProps} from './masonry-scroller'\nimport {useContainerPosition} from './use-container-position'\nimport {useResizeObserver} from './use-resize-observer'\nimport {usePositioner} from './use-positioner'\nimport type {UsePositionerOptions} from './use-positioner'\nimport {useScrollToIndex} from './use-scroll-to-index'\nimport type {UseScrollToIndexOptions} from './use-scroll-to-index'\n\n/**\n * A \"batteries included\" masonry grid which includes all of the implementation details below. This component is the\n * easiest way to get off and running in your app, before switching to more advanced implementations, if necessary.\n * It will change its column count to fit its container's width and will decide how many rows to render based upon\n * the height of the browser `window`.\n */\nexport function Masonry<Item>(props: MasonryProps<Item>) {\n  const containerRef = React.useRef<null | HTMLElement>(null)\n  const windowSize = useWindowSize({\n    initialWidth: props.ssrWidth,\n    initialHeight: props.ssrHeight,\n  })\n  const containerPos = useContainerPosition(containerRef, windowSize)\n  const nextProps = Object.assign(\n    {\n      offset: containerPos.offset,\n      width: containerPos.width || windowSize[0],\n      height: windowSize[1],\n      containerRef,\n    },\n    props\n  ) as any\n  nextProps.positioner = usePositioner(nextProps)\n  nextProps.resizeObserver = useResizeObserver(nextProps.positioner)\n  const scrollToIndex = useScrollToIndex(nextProps.positioner, {\n    height: nextProps.height,\n    offset: containerPos.offset,\n    align:\n      typeof props.scrollToIndex === 'object'\n        ? props.scrollToIndex.align\n        : void 0,\n  })\n  const index =\n    props.scrollToIndex &&\n    (typeof props.scrollToIndex === 'number'\n      ? props.scrollToIndex\n      : props.scrollToIndex.index)\n\n  React.useEffect(() => {\n    if (index !== void 0) scrollToIndex(index)\n  }, [index, scrollToIndex])\n\n  return React.createElement(MasonryScroller, nextProps)\n}\n\nexport interface MasonryProps<Item>\n  extends Omit<\n      MasonryScrollerProps<Item>,\n      'offset' | 'width' | 'height' | 'containerRef' | 'positioner'\n    >,\n    Pick<UsePositionerOptions, 'columnWidth' | 'columnGutter' | 'columnCount'> {\n  /**\n   * Scrolls to a given index within the grid. The grid will re-scroll\n   * any time the index changes.\n   */\n  scrollToIndex?:\n    | number\n    | {\n        index: number\n        align: UseScrollToIndexOptions['align']\n      }\n  /**\n   * This is the width that will be used for the browser `window` when rendering this component in SSR.\n   * This prop isn't relevant for client-side only apps.\n   */\n  ssrWidth?: number\n  /**\n   * This is the height that will be used for the browser `window` when rendering this component in SSR.\n   * This prop isn't relevant for client-side only apps.\n   */\n  ssrHeight?: number\n  /**\n   * This determines how often (in frames per second) to update the scroll position of the\n   * browser `window` in state, and as a result the rate the masonry grid recalculates its visible cells.\n   * The default value of `12` has been very reasonable in my own testing, but if you have particularly\n   * heavy `render` components it may be prudent to reduce this number.\n   * @default 12\n   */\n  scrollFps?: number\n}\n\nif (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\n  Masonry.displayName = 'Masonry'\n}\n","import * as React from 'react'\nimport {Masonry} from './masonry'\nimport type {MasonryProps} from './masonry'\n\n/**\n * This is just a single-column `<Masonry>` component with `rowGutter` prop instead of\n * a `columnGutter` prop.\n */\nexport function List<Item>(props: ListProps<Item>) {\n  return (\n    <Masonry<Item>\n      role='list'\n      columnGutter={props.rowGutter}\n      columnCount={1}\n      columnWidth={1}\n      {...props}\n    />\n  )\n}\n\nexport interface ListProps<Item>\n  extends Omit<\n    MasonryProps<Item>,\n    'columGutter' | 'columnCount' | 'columnWidth'\n  > {\n  /**\n   * The amount of vertical space in pixels to add between the list cells.\n   * @default 0\n   */\n  rowGutter?: number\n}\n\nif (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\n  List.displayName = 'List'\n}\n","import * as React from 'react'\nimport useLatest from '@react-hook/latest'\n\n/**\n * A utility hook for seamlessly adding infinite scroll behavior to the `useMasonry()` hook. This\n * hook invokes a callback each time the last rendered index surpasses the total number of items\n * in your items array or the number defined in the `totalItems` option.\n *\n * @param loadMoreItems This callback is invoked when more rows must be loaded. It will be used to\n *  determine when to refresh the list with the newly-loaded data. This callback may be called multiple\n *  times in reaction to a single scroll event, so it's important to memoize its arguments. If you're\n *  creating this callback inside of a functional component, make sure you wrap it in `React.useCallback()`,\n *  as well.\n * @param options\n */\nexport function useInfiniteLoader<Item, T extends LoadMoreItemsCallback<Item>>(\n  loadMoreItems: T,\n  options: UseInfiniteLoaderOptions<Item> = emptyObj\n): LoadMoreItemsCallback<Item> {\n  const {\n    isItemLoaded,\n    minimumBatchSize = 16,\n    threshold = 16,\n    totalItems = 9e9,\n  } = options\n  const storedLoadMoreItems = useLatest(loadMoreItems)\n  const storedIsItemLoaded = useLatest(isItemLoaded)\n\n  return React.useCallback(\n    (startIndex, stopIndex, items) => {\n      const unloadedRanges = scanForUnloadedRanges(\n        storedIsItemLoaded.current,\n        minimumBatchSize,\n        items,\n        totalItems,\n        Math.max(0, startIndex - threshold),\n        Math.min(totalItems - 1, (stopIndex || 0) + threshold)\n      )\n      // The user is responsible for memoizing their loadMoreItems() function\n      // because we don't want to make assumptions about how they want to deal\n      // with `items`\n      for (let i = 0; i < unloadedRanges.length - 1; ++i)\n        storedLoadMoreItems.current(\n          unloadedRanges[i],\n          unloadedRanges[++i],\n          items\n        )\n    },\n    [\n      totalItems,\n      minimumBatchSize,\n      threshold,\n      storedLoadMoreItems,\n      storedIsItemLoaded,\n    ]\n  )\n}\n\n/**\n * Returns all of the ranges within a larger range that contain unloaded rows.\n */\nfunction scanForUnloadedRanges<Item>(\n  isItemLoaded: UseInfiniteLoaderOptions<\n    Item\n  >['isItemLoaded'] = defaultIsItemLoaded,\n  minimumBatchSize: UseInfiniteLoaderOptions<Item>['minimumBatchSize'] = 16,\n  items: any[],\n  totalItems: UseInfiniteLoaderOptions<Item>['totalItems'] = 9e9,\n  startIndex: number,\n  stopIndex: number\n): number[] {\n  const unloadedRanges: number[] = []\n  let rangeStartIndex: number | undefined,\n    rangeStopIndex: number | undefined,\n    index = startIndex\n\n  /* istanbul ignore next */\n  for (; index <= stopIndex; index++) {\n    if (!isItemLoaded(index, items)) {\n      rangeStopIndex = index\n      if (rangeStartIndex === void 0) rangeStartIndex = index\n    } else if (rangeStartIndex !== void 0 && rangeStopIndex !== void 0) {\n      unloadedRanges.push(rangeStartIndex, rangeStopIndex)\n      rangeStartIndex = rangeStopIndex = void 0\n    }\n  }\n\n  // If :rangeStopIndex is not null it means we haven't run out of unloaded rows.\n  // Scan forward to try filling our :minimumBatchSize.\n  if (rangeStartIndex !== void 0 && rangeStopIndex !== void 0) {\n    const potentialStopIndex = Math.min(\n      Math.max(rangeStopIndex, rangeStartIndex + minimumBatchSize - 1),\n      totalItems - 1\n    )\n\n    /* istanbul ignore next */\n    for (index = rangeStopIndex + 1; index <= potentialStopIndex; index++) {\n      if (!isItemLoaded(index, items)) {\n        rangeStopIndex = index\n      } else {\n        break\n      }\n    }\n\n    unloadedRanges.push(rangeStartIndex, rangeStopIndex)\n  }\n\n  // Check to see if our first range ended prematurely.\n  // In this case we should scan backwards to try filling our :minimumBatchSize.\n  /* istanbul ignore next */\n  if (unloadedRanges.length) {\n    let firstUnloadedStart = unloadedRanges[0]\n    const firstUnloadedStop = unloadedRanges[1]\n\n    while (\n      firstUnloadedStop - firstUnloadedStart + 1 < minimumBatchSize &&\n      firstUnloadedStart > 0\n    ) {\n      const index = firstUnloadedStart - 1\n\n      if (!isItemLoaded(index, items)) {\n        unloadedRanges[0] = firstUnloadedStart = index\n      } else {\n        break\n      }\n    }\n  }\n\n  return unloadedRanges\n}\n\nconst defaultIsItemLoaded = <Item>(index: number, items: Item[]): boolean =>\n  items[index] !== void 0\n\nexport interface UseInfiniteLoaderOptions<Item> {\n  /**\n   *  A callback responsible for determining the loaded state of each item. Should return `true`\n   * if the item has already been loaded and `false` if not.\n   * @default (index: number, items: any[]) => boolean\n   */\n  isItemLoaded?: (index: number, items: Item[]) => boolean\n  /**\n   * The minimum number of new items to be loaded at a time.  This property can be used to\n   * batch requests and reduce HTTP requests.\n   * @default 16\n   */\n  minimumBatchSize?: number\n  /**\n   * The threshold at which to pre-fetch data. A threshold X means that new data should start\n   * loading when a user scrolls within X cells of the end of your `items` array.\n   * @default 16\n   */\n  threshold?: number\n  /**\n   * The total number of items you'll need to eventually load (if known). This can\n   * be arbitrarily high if not known.\n   * @default 9e9\n   */\n  totalItems?: number\n}\n\nexport type LoadMoreItemsCallback<Item> = (\n  startIndex: number,\n  stopIndex: number,\n  items: Item[]\n) => any\n\nconst emptyObj = {}\n"],"names":["useScroller","offset","fps","scrollTop","useScrollPosition","isScrolling","setIsScrolling","React","didMount","current","to","requestTimeout","clearRequestTimeout","Math","max","elementsCache","WeakMap","useForceUpdate","setState","emptyObj","useMasonry","positioner","resizeObserver","items","as","ContainerComponent","id","key","className","style","role","tabIndex","containerRef","itemAs","ItemComponent","itemStyle","itemHeightEstimate","itemKey","defaultGetItemKey","overscanBy","height","render","RenderComponent","onRender","startIndex","stopIndex","forceUpdate","setItemRef","getRefSetter","itemCount","length","columnWidth","columnCount","range","estimateHeight","size","shortestColumn","measuredCount","shortestColumnSize","children","itemRole","undefined","storedOnRender","useLatest","rangeEnd","needsFreshBatch","index","left","top","data","phaseTwoStyle","width","writingMode","position","process","throwWithoutData","push","Object","assign","createRenderElement","min","batchSize","ceil","phaseOneStyle","getCachedSize","didEverMount","containerStyle","getContainerStyle","assignUserStyle","Error","trieMemoize","OneKeyMap","memoizeOne","maxWidth","maxHeight","willChange","pointerEvents","cmp2","args","pargs","userStyle","_","i","zIndex","visibility","el","observe","set","get","offsetHeight","MasonryScroller","props","scrollFps","displayName","useContainerPosition","elementRef","deps","emptyArr","containerPosition","setContainerPosition","useLayoutEffect","offsetTop","offsetParent","offsetWidth","useResizeObserver","createResizeObserver","disconnect","updater","handleEntries","rafSchd","entries","updates","entry","target","update","ro","ResizeObserver","bind","cancel","RED","BLACK","NIL","DELETE","KEEP","addInterval","treeNode","high","node","list","prevNode","next","removeInterval","NULL_NODE","low","C","P","R","L","updateMax","updateMaxUp","x","rotateLeft","tree","y","root","rotateRight","replaceNode","fixRemove","w","minimumTree","fixInsert","z","createIntervalTree","indexMap","insert","remove","intervalResult","originalYColor","search","callback","stack","pop","curr","usePositioner","columnGutter","initPositioner","computedColumnWidth","computedColumnCount","getColumns","createPositioner","positionerRef","prevDeps","opts","prevOpts","optsChanged","every","item","prevPositioner","cacheSize","pos","intervalTree","columnHeights","Array","columnItems","column","columns","j","itemsInColumn","binarySearch","startItem","lo","hi","renderCallback","defaultItemHeight","tallestColumn","apply","a","l","h","m","minimumWidth","gutter","floor","useScrollToIndex","options","align","element","window","innerHeight","latestOptions","getTarget","latestElement","state","dispatch","action","nextState","prevTop","type","value","defaultState","throttledDispatch","useThrottleCallback","useEvent","currentTop","scrollTo","didUnsubscribe","timeout","setTimeout","clearTimeout","estimatedTop","Masonry","windowSize","useWindowSize","initialWidth","ssrWidth","initialHeight","ssrHeight","containerPos","nextProps","scrollToIndex","__reactCreateElement__","List","rowGutter","useInfiniteLoader","loadMoreItems","isItemLoaded","minimumBatchSize","threshold","totalItems","storedLoadMoreItems","storedIsItemLoaded","unloadedRanges","scanForUnloadedRanges","defaultIsItemLoaded","rangeStartIndex","rangeStopIndex","potentialStopIndex","firstUnloadedStart","firstUnloadedStop"],"mappings":"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"}